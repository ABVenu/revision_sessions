### ðŸ”¹ 1. **Variables & Declarations**

**Topics:**

* `var`, `let`, `const` â€” redeclaration, reassignment, scoping
* Block Scope vs Function Scope
* Default values and declaration rules
* Variable Naming Best Practices
* Global variables and implicit globals (missing earlier âœ… now included)


---

### ðŸ”¹ 2. **Data Types**

**Topics:**

* Primitive Types: `string`, `number`, `boolean`, `null`, `undefined`, `symbol`, `bigint`
* Reference Types: `object`, `array`, `function`
* `typeof` quirks (`typeof null === 'object'`)
* Copy by value vs copy by reference



---

### ðŸ”¹ 3. **Type Conversion & Coercion**

**Topics:**

* Explicit Conversion (`String()`, `Number()`, `Boolean()`)
* Implicit Coercion (with `+`, `-`, `==`, `!=`)
* Weird cases: `[] + {}`, `[] == false`, `'5' - 1`



---

### ðŸ”¹ 4. **Truthy / Falsy**

**Topics:**

* List of all falsy values
* Use in conditions
* Double negation `!!` to convert to boolean



---

### ðŸ”¹ 5. **Short-Circuiting / Logical Ops**

**Topics:**

* `||`, `&&` evaluation
* `??` Nullish coalescing operator
* Practical use cases: default values, conditionals



---

### ðŸ”¹ 6. **Control Flow**

**Topics:**

* `if`, `else`, `else if`
* `switch`
* Ternary Operator
* Nested and compound conditions


---

### ðŸ”¹ 7. **Loops**

**Topics:**

* `for`, `while`, `do...while`
* Loop control: `break`, `continue`
* `for...in` vs `for...of` (key vs value iteration)
* Looping over arrays, objects, strings



---
### ðŸ”¹ 10. **Array Operations**

**Topics:**

* Iteration: `forEach`, `map`, `filter`, `reduce`, `find`, `some`, `every`
* Mutating: `push`, `pop`, `shift`, `unshift`, `splice`, `sort`, `reverse`
* Non-mutating: `slice`, `concat`, `join`
* Array destructuring
* Flattening arrays: `flat()`
* Spread operator in arrays


### ðŸ”¹ 8. **Functions**

**Topics:**

* Declaration vs Expression
* Arrow Functions (and `this` binding)
* Default Parameters
* Rest Parameters
* Spread syntax in arguments
* Named vs anonymous functions
* Callback functions



---

### ðŸ”¹ 9. **IIFE (Immediately Invoked Function Expressions)**

**Included** â€” No missing points


